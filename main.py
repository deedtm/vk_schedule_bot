import vk_api
import requests
from tokenVk import token
from time import sleep
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()
############################ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ############################################
day = '–ë–ê–ì–ë–ê–ì–ë–ê–ì–ë–ê–ì–ë–ê–ì–ë–ê–ì–ë–ê–ì–ë–ê–ì'
botid = ''
bot = ''
bot_ids = []
botid_list = []

sch = '1. \n' \
      '2. \n' \
      '3. \n' \
      '4. \n' \
      '5. \n' \
      '6. \n' \
      '7. \n' \
      '8. \n' \
      '9. '

status_sch = ['clear']


############################ —Ñ—É–Ω–∫—Ü–∏–∏ ############################################
def fill_sch(peer_id, sch_list, status_sch, user_id, text):
    print(peer_id, sch_list, status_sch, user_id, text)
    vk.messages.send(
        peer_id=peer_id,
        random_id=get_random_id(),
        message=f'‚ùóÔ∏è –°–º–µ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–Ω—è {day} ‚ùóÔ∏è\n\n'
                '–°–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')

    vk.messages.send(
        peer_id=peer_id,
        random_id=get_random_id(),
        message='‚ô¶Ô∏è 1 —à–∞–≥ ‚ô¶Ô∏è\n'
                '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —É—Ä–æ–∫–æ–≤ (1-9)')
    if user_id > 0:
        if text.isdigit:
            for _ in range(len(sch_list) - int(text)):
                sch_list.remove(sch_list[-1])
        elif text[0] != '!':
            vk.messages.send(
                peer_id=peer_id,
                random_id=get_random_id(),
                message='‚ÄºÔ∏è‚ÄºÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Ü–∏—Ñ—Ä—É ‚ÄºÔ∏è‚ÄºÔ∏è')

    vk.messages.send(
        peer_id=peer_id,
        random_id=get_random_id(),
        message='‚ô¶Ô∏è 2 —à–∞–≥ ‚ô¶Ô∏è\n'
                '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É:\n'
                '1. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - \n'
                '3. –ê–ª–≥–µ–±—Ä–∞ - \n'
                '\n‚ÄºÔ∏è –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–∏–º–≤–æ–ª–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—à—É —Å–æ–±–ª—é–¥–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü'
                '\n‚ÄºÔ∏è –í –æ–±—Ä–∞–∑—Ü–µ –ø–æ—Å–ª–µ –¥–µ—Ñ–∏—Å–∞ —Å—Ç–æ–∏—Ç –ø—Ä–æ–±–µ–ª')

    while True:
        if user_id > 0:
            if text[0].isdigit:
                user_sch = text.split('\n')
                for i in user_sch:
                    print(i[0])
                    sch_list[int(i[0]) - 1] = i
            break

    user_sch = '\n'.join(sch_list)

    vk.messages.send(
        peer_id=peer_id,
        random_id=get_random_id(),
        message='‚ô¶Ô∏è 3 —à–∞–≥ ‚ô¶Ô∏è\n'
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n'
                f'{user_sch}\n'
                '\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –≤–≤–æ–¥, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ"\n'
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –≤–≤–æ–¥, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–∏–∑–º–µ–Ω–∏—Ç—å"')

    while True:
        if user_id > 0:
            if text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å':
                if text[0].isdigit:
                    user_sch = text.split('\n')
                    for i in user_sch:
                        print(i[0])
                        sch_list[int(i[0]) - 1] = i
                break
            elif text.lower() == '–≥–æ—Ç–æ–≤–æ':
                break
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    random_id=get_random_id(),
                    message='‚ÄºÔ∏è‚ÄºÔ∏è –í–≤–µ–¥–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ" –∏–ª–∏ "–∏–∑–º–µ–Ω–∏—Ç—å" ‚ÄºÔ∏è‚ÄºÔ∏è')

    vk.messages.send(
        peer_id=peer_id,
        random_id=get_random_id(),
        message='–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚úÖ')
    status_sch[0] = 'filled'


######################### –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è #########################################
def sch_output(peer_id, user_sch, user_id, text, sch_list):
    vk.messages.send(
        peer_id=peer_id,
        random_id=get_random_id(),
        message=f'{user_sch}'
                '\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–≤–µ–¥—è "–∏–∑–º–µ–Ω–∏—Ç—å"')
    if user_id > 0:
        if text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å':
            vk.messages.send(
                peer_id=peer_id,
                random_id=get_random_id(),
                message='‚ô¶Ô∏è 2 —à–∞–≥ ‚ô¶Ô∏è\n'
                        '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É:\n'
                        '1. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - \n'
                        '3. –ê–ª–≥–µ–±—Ä–∞ - \n'
                        '\n‚ÄºÔ∏è –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–∏–º–≤–æ–ª–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—à—É —Å–æ–±–ª—é–¥–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü'
                        '\n‚ÄºÔ∏è –í –æ–±—Ä–∞–∑—Ü–µ –ø–æ—Å–ª–µ –¥–µ—Ñ–∏—Å–∞ —Å—Ç–æ–∏—Ç –ø—Ä–æ–±–µ–ª')

            while True:
                messages = vk.messages.getConversations(offset=0, count=20, filter='important')
                text = messages['items'][0]['last_message']['text']
                user_id = messages['items'][0]['last_message']['from_id']
                if user_id > 0:
                    if text[0].isdigit:
                        user_sch = text.split('\n')
                        for i in user_sch:
                            print(i[0])
                            sch_list[int(i[0]) - 1] = i


##################################################################################################################
def main():
    global day, botid, bot, bot_ids, botid_list, status_sch
    longpoll = VkBotLongPoll(vk_session, '209862435')
    try:
        for event in longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                text = event.message.text
                user_id = event.message.from_id
                peer_id = event.message.peer_id
                if len(bot_ids) > 0:
                    botid = bot + str(bot_ids[-1]) + '\n'
                    botid_list = botid.split('\n')

                if not (peer_id in bot_ids):
                    bot_ids.append(peer_id)
                    if not (botid in botid_list):
                        vk.messages.send(peer_id=peer_id,
                                         random_id=get_random_id(),
                                         message='üëâüëå –ë–û–¢ –û–ü–£–©–ï–ù üîû\n'
                                                 '================\n'
                                                 '‚ñ∂ –≤–≤–µ–¥–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã')

                if text.lower() == '!–∫–æ–º–∞–Ω–¥—ã' or text.lower() == '! –∫–æ–º–∞–Ω–¥—ã':
                    vk.messages.send(peer_id=peer_id,
                                     random_id=get_random_id(),
                                     message='üî© –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                                             '‚ñ∂ !–∫–æ–º–∞–Ω–¥—ã\n –≤—ã–∑–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n\n'
                                             '‚ñ∂ !–¥–∑ [#]\n –≤—ã–∑–æ–≤ –¥–∑ –Ω–∞ [–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å]\n# - [–ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç]')

                if text.lower() == '!—Ç–µ—Å—Ç' or text.lower() == '!—Ç':
                    vk.messages.send(peer_id=peer_id,
                                     random_id=get_random_id(),
                                     message='ü§† @allllllllllllk (–≠–ô –¢–´) ü§†')

                if text.lower() in ['!–¥–∑ –ø–Ω', '!–¥–∑ –≤—Ç', '!–¥–∑ —Å—Ä', '!–¥–∑ —á—Ç', '!–¥–∑ –ø—Ç',
                                    '!–¥–∑ 1', '!–¥–∑ 2', '!–¥–∑ 3', '!–¥–∑ 4', '!–¥–∑ 5']:
                    if text.lower()[0] + text.lower()[1] + text.lower()[2] == '!–¥–∑' or text.lower()[0] + \
                            text.lower()[1] + text.lower()[2] + text.lower()[3] == '! –¥–∑':
                        sch_list = sch.split('\n')
                        if ((text.lower()[-2] + text.lower()[-1]) == '–ø–Ω') or text.lower()[-1] == '1':
                            day = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
                            status_sch.append('mon')
                            if status_sch[0] == 'clear':
                                fill_sch(peer_id, sch_list, status_sch, user_id, text)
                            if status_sch[0] == 'filled':
                                sch_output(peer_id, user_sch, user_id, text, sch_list)

                        elif ((text.lower()[-2] + text.lower()[-1]) == '–≤—Ç') or text.lower()[-1] == '2':
                            day = '–í—Ç–æ—Ä–Ω–∏–∫'

                        elif ((text.lower()[-2] + text.lower()[-1]) == '—Å—Ä') or text.lower()[-1] == '3':
                            day = '–°—Ä–µ–¥–∞'

                        elif ((text.lower()[-2] + text.lower()[-1]) == '—á—Ç') or text.lower()[-1] == '4':
                            day = '–ß–µ—Ç–≤–µ—Ä–≥'

                        elif ((text.lower()[-2] + text.lower()[-1]) == '–ø—Ç') or text.lower()[-1] == '5':
                            day = '–ü—è—Ç–Ω–∏—Ü–∞'

    except requests.exceptions.ReadTimeout:
        print("--------------- [ –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê ] ---------------")
        print("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º...")
        time.sleep(3)


if __name__ == '__main__':
    main()
